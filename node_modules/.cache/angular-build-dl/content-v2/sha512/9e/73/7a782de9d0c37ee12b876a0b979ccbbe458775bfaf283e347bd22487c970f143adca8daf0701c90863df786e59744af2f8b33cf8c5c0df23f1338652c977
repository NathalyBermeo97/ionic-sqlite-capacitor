{"version":3,"sources":["webpack:///src/app/pages/details/details.page.html","webpack:///src/app/pages/details/details-routing.module.ts","webpack:///src/app/pages/details/details.module.ts","webpack:///src/app/pages/details/details.page.scss","webpack:///src/app/pages/details/details.page.ts","webpack:///src/app/services/servicetwo.service.ts"],"names":["routes","path","component","DetailsPageRoutingModule","imports","forChild","exports","DetailsPageModule","declarations","DetailsPage","route","databaseService","product","id","snapshot","paramMap","get","getProductById","selector","template","CapacitorSQLite","Device","Storage","DB_SETUP_KEY","DB_NAME_KEY","ServicetwoService","http","alertCtrl","dbReady","dbName","getInfo","info","platform","sqlite","requestPermissions","setupDatabase","create","header","message","buttons","alert","present","key","dbSetupDone","value","downloadDatabase","open","database","next","update","subscribe","jsonExport","jsonstring","JSON","stringify","isJsonValid","isValid","console","log","result","set","importFromJson","createSyncTable","setSyncDate","syncdate","Date","getTime","pipe","isReady","values","statement","query","mode","exportToJson","jsonexportmode","name","randomValue","Math","floor","random","randomVendor","execute","statements","productId","deleteDatabase","providedIn"],"mappings":"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","file":"pages-details-details-module-es5.js","sourcesContent":["export default \"<ion-header>\\r\\n  <ion-toolbar color=\\\"primary\\\">\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-back-button defaultHref=\\\"/\\\"></ion-back-button>\\r\\n    </ion-buttons>\\r\\n    <ion-title>Product</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n \\r\\n<ion-content>\\r\\n  <ion-card *ngIf=\\\"product\\\">\\r\\n    <ion-card-header>\\r\\n      <ion-card-title>{{ product.name }}</ion-card-title>\\r\\n    </ion-card-header>\\r\\n    <ion-card-content>\\r\\n      <h2>{{ product.company_name}}</h2>\\r\\n      {{ product.company_info }}\\r\\n    </ion-card-content>\\r\\n  </ion-card>\\r\\n</ion-content>\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { DetailsPage } from './details.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: DetailsPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class DetailsPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { DetailsPageRoutingModule } from './details-routing.module';\r\n\r\nimport { DetailsPage } from './details.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    DetailsPageRoutingModule\r\n  ],\r\n  declarations: [DetailsPage]\r\n})\r\nexport class DetailsPageModule {}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2RldGFpbHMvZGV0YWlscy5wYWdlLnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ServicetwoService } from 'src/app/services/servicetwo.service';\r\n\r\n@Component({\r\n  selector: 'app-details',\r\n  templateUrl: './details.page.html',\r\n  styleUrls: ['./details.page.scss'],\r\n})\r\nexport class DetailsPage implements OnInit {\r\n  product = null;\r\n  constructor(private route: ActivatedRoute, private databaseService: ServicetwoService) { }\r\n\r\n  async ngOnInit() {\r\n    const id = this.route.snapshot.paramMap.get('id');\r\n    this.product = await this.databaseService.getProductById(id);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Plugins } from '@capacitor/core';\r\nimport '@capacitor-community/sqlite';\r\nimport { JsonSQLite } from '@capacitor-community/sqlite';\r\nimport { BehaviorSubject, from, of } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AlertController } from '@ionic/angular';\r\nimport { switchMap } from 'rxjs/operators';\r\nconst { CapacitorSQLite, Device, Storage } = Plugins;\r\n\r\nconst DB_SETUP_KEY = 'first_db_setup';\r\nconst DB_NAME_KEY = 'db_name';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ServicetwoService {\r\n  dbReady = new BehaviorSubject(false);\r\n  dbName = '';\r\n\r\n  constructor(private http: HttpClient, private alertCtrl: AlertController) { }\r\n\r\n  async init() {\r\n    const info = await Device.getInfo();\r\n\r\n    if (info.platform === 'android') {\r\n      try {\r\n        const sqlite = CapacitorSQLite as any;\r\n        await sqlite.requestPermissions();\r\n        this.setupDatabase();\r\n      } catch (e) {\r\n        const alert = await this.alertCtrl.create({\r\n          header: 'No DB access',\r\n          message: 'This app can\\'t work without Database access.',\r\n          buttons: ['OK']\r\n        });\r\n        await alert.present();\r\n      }\r\n    } else {\r\n      this.setupDatabase();\r\n    }\r\n  }\r\n\r\n  private async setupDatabase() {\r\n    const dbSetupDone = await Storage.get({ key: DB_SETUP_KEY });\r\n\r\n    if (!dbSetupDone.value) {\r\n      this.downloadDatabase();\r\n    } else {\r\n      this.dbName = (await Storage.get({ key: DB_NAME_KEY })).value;\r\n      await CapacitorSQLite.open({ database: this.dbName });\r\n      this.dbReady.next(true);\r\n    }\r\n  }\r\n\r\n  // Potentially build this out to an update logic:\r\n  // Sync your data on every app start and update the device DB\r\n  private downloadDatabase(update = false) {\r\n    this.http.get('https://devdactic.fra1.digitaloceanspaces.com/tutorial/db.json')\r\n      .subscribe(async (jsonExport: JsonSQLite) => {\r\n        const jsonstring = JSON.stringify(jsonExport);\r\n        const isValid = await CapacitorSQLite.isJsonValid({ jsonstring });\r\n        console.log('import: ', jsonstring);\r\n        \r\n        if (isValid.result) {\r\n          this.dbName = jsonExport.database;\r\n          await Storage.set({ key: DB_NAME_KEY, value: this.dbName });\r\n          await CapacitorSQLite.importFromJson({ jsonstring });\r\n          await Storage.set({ key: DB_SETUP_KEY, value: '1' });\r\n\r\n          // Your potential logic to detect offline changes later\r\n          if (!update) {\r\n            await CapacitorSQLite.createSyncTable();\r\n          } else {\r\n            await CapacitorSQLite.setSyncDate({ syncdate: '' + new Date().getTime() })\r\n          }\r\n\r\n          this.dbReady.next(true);\r\n        }\r\n      });\r\n  }\r\n\r\n  getProductList() {\r\n    return this.dbReady.pipe(\r\n      switchMap(isReady => {\r\n        if (!isReady) {\r\n          return of({ values: [] });\r\n        } else {\r\n          const statement = 'SELECT * FROM products;';\r\n          return from(CapacitorSQLite.query({ statement, values: [] }));\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  async getProductById(id) {\r\n    const statement = `SELECT * FROM products LEFT JOIN vendors ON vendors.id=products.vendorid WHERE products.id=${id};`;\r\n    return (await CapacitorSQLite.query({ statement, values: [] })).values[0];\r\n  }\r\n\r\n  getDatabaseExport(mode) {\r\n    console.log('mode: ', mode);\r\n    return CapacitorSQLite.exportToJson({ jsonexportmode: mode });\r\n  }\r\n\r\n  addDummyProduct(name) {\r\n    const randomValue = Math.floor(Math.random() * 300) + 1;\r\n    const randomVendor = Math.floor(Math.random() * 2) + 1\r\n    const statement = `INSERT INTO products (name, currency, value, vendorid, currency) VALUES ('${name}','EUR', ${randomValue}, ${randomVendor});`;\r\n    return CapacitorSQLite.execute({ statements: statement });\r\n  }\r\n\r\n  deleteProduct(productId) {\r\n    const statement = `DELETE FROM products WHERE id = ${productId};`;\r\n    return CapacitorSQLite.execute({ statements: statement });\r\n  }\r\n\r\n  // For testing only..\r\n  async deleteDatabase() {\r\n    const dbName = await Storage.get({ key: DB_NAME_KEY });\r\n    await Storage.set({ key: DB_SETUP_KEY, value: null });\r\n    return CapacitorSQLite.deleteDatabase({ database: dbName.value });\r\n  }\r\n\r\n\r\n\r\n}\r\n"]}