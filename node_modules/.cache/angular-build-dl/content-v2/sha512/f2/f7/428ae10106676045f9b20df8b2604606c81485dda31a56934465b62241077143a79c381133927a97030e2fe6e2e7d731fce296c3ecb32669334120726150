{"version":3,"sources":["webpack:///src/app/pagetwo/pagetwo.page.html","webpack:///src/app/pagetwo/pagetwo-routing.module.ts","webpack:///src/app/pagetwo/pagetwo.module.ts","webpack:///src/app/pagetwo/pagetwo.page.scss","webpack:///src/app/pagetwo/pagetwo.page.ts","webpack:///src/app/services/servicetwo.service.ts"],"names":["routes","path","component","PagetwoPageRoutingModule","imports","forChild","exports","PagetwoPageModule","declarations","PagetwoPage","databaseService","products","newProduct","loadProducts","getProductList","subscribe","res","values","console","log","mode","getDatabaseExport","dataExport","addDummyProduct","product","deleteProduct","id","filter","p","selector","template","CapacitorSQLite","Device","Storage","DB_SETUP_KEY","DB_NAME_KEY","ServicetwoService","http","alertCtrl","dbReady","dbName","getInfo","info","platform","sqlite","requestPermissions","setupDatabase","create","header","message","buttons","alert","present","get","key","dbSetupDone","value","downloadDatabase","open","database","next","update","jsonExport","jsonstring","JSON","stringify","isJsonValid","isValid","result","set","importFromJson","createSyncTable","setSyncDate","syncdate","Date","getTime","pipe","isReady","statement","query","exportToJson","jsonexportmode","name","randomValue","Math","floor","random","randomVendor","execute","statements","productId","deleteDatabase","providedIn"],"mappings":"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","file":"pagetwo-pagetwo-module-es5.js","sourcesContent":["export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-title>Pagina de productos</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n  <ion-card>\\r\\n    <ion-card-header>\\r\\n      <ion-card-title>Productos</ion-card-title>\\r\\n    </ion-card-header>\\r\\n  \\r\\n    <ion-card-content>\\r\\n      Agrega y elimina productos de tu lista\\r\\n    </ion-card-content>\\r\\n  </ion-card>\\r\\n  \\r\\n  <ion-card>\\r\\n\\r\\n\\r\\n \\r\\n    <ion-card>\\r\\n      <ion-card-content>\\r\\n        <ion-item-sliding *ngFor=\\\"let p of products\\\">\\r\\n          <ion-item [routerLink]=\\\"['product', p.id]\\\">\\r\\n            <ion-label>\\r\\n              {{ p.name }}\\r\\n              <p>{{ p.value | currency:p.currency }}</p>\\r\\n            </ion-label>\\r\\n          </ion-item>\\r\\n          \\r\\n        </ion-item-sliding>\\r\\n      </ion-card-content>\\r\\n   \\r\\n    </ion-card>\\r\\n   \\r\\n  \\r\\n  </ion-card>\\r\\n\\r\\n  <ion-button expand=\\\"full\\\" (click)=\\\"addProduct()\\\">Agregar producto</ion-button>\\r\\n  <ion-button expand=\\\"full\\\" (click)=\\\"deleteProduct(p)\\\">Eliminar producto</ion-button>\\r\\n\\r\\n\\r\\n  <ion-button expand=\\\"full\\\" routerLink=\\\"/\\\" >Regresar</ion-button>\\r\\n\\r\\n</ion-content>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { PagetwoPage } from './pagetwo.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: PagetwoPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class PagetwoPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { PagetwoPageRoutingModule } from './pagetwo-routing.module';\r\n\r\nimport { PagetwoPage } from './pagetwo.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    PagetwoPageRoutingModule\r\n  ],\r\n  declarations: [PagetwoPage]\r\n})\r\nexport class PagetwoPageModule {}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2V0d28vcGFnZXR3by5wYWdlLnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\r\nimport { ServicetwoService } from '../services/servicetwo.service';\r\n\r\n@Component({\r\n  selector: 'app-pagetwo',\r\n  templateUrl: './pagetwo.page.html',\r\n  styleUrls: ['./pagetwo.page.scss'],\r\n})\r\nexport class PagetwoPage {\r\n\r\n  products = [];\r\n  export = null;\r\n  newProduct = 'Nuevo producto';\r\n\r\n  constructor(private databaseService: ServicetwoService) {\r\n    this.loadProducts();\r\n  }\r\n  \r\n  loadProducts() {\r\n    this.databaseService.getProductList().subscribe(res => {\r\n      this.products = res.values;\r\n      console.log('my products: ', res);\r\n    });\r\n  }\r\n\r\n  // Mode is either \"partial\" or \"full\"\r\n  async createExport(mode) {\r\n    const dataExport = await this.databaseService.getDatabaseExport(mode);\r\n    console.log('my export: ', dataExport);\r\n    \r\n    this.export = dataExport.export;\r\n  }\r\n \r\n  async addProduct() {\r\n    await this.databaseService.addDummyProduct(this.newProduct);\r\n    this.newProduct = '';\r\n    this.loadProducts();\r\n  }\r\n \r\n  async deleteProduct(product) {    \r\n    await this.databaseService.deleteProduct(product.id);\r\n    this.products = this.products.filter(p => p != product);    \r\n  }\r\n \r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Plugins } from '@capacitor/core';\r\nimport '@capacitor-community/sqlite';\r\nimport { JsonSQLite } from '@capacitor-community/sqlite';\r\nimport { BehaviorSubject, from, of } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AlertController } from '@ionic/angular';\r\nimport { switchMap } from 'rxjs/operators';\r\nconst { CapacitorSQLite, Device, Storage } = Plugins;\r\nconst DB_SETUP_KEY = 'first_db_setup';\r\nconst DB_NAME_KEY = 'db_name';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ServicetwoService {\r\n\r\n  dbReady = new BehaviorSubject(false);\r\n  dbName = '';\r\n\r\n  constructor(private http: HttpClient, private alertCtrl: AlertController) { }\r\n\r\n  async init() {\r\n    const info = await Device.getInfo();\r\n\r\n    if (info.platform === 'android') {\r\n      try {\r\n        const sqlite = CapacitorSQLite as any;\r\n        await sqlite.requestPermissions();\r\n        this.setupDatabase();\r\n      } catch (e) {\r\n        const alert = await this.alertCtrl.create({\r\n          header: 'No DB access',\r\n          message: 'This app can\\'t work without Database access.',\r\n          buttons: ['OK']\r\n        });\r\n        await alert.present();\r\n      }\r\n    } else {\r\n      this.setupDatabase();\r\n    }\r\n  }\r\n\r\n  private async setupDatabase() {\r\n    const dbSetupDone = await Storage.get({ key: DB_SETUP_KEY });\r\n\r\n    if (!dbSetupDone.value) {\r\n      this.downloadDatabase();\r\n    } else {\r\n      this.dbName = (await Storage.get({ key: DB_NAME_KEY })).value;\r\n      await CapacitorSQLite.open({ database: this.dbName });\r\n      this.dbReady.next(true);\r\n    }\r\n  }\r\n\r\n  // Potentially build this out to an update logic:\r\n  // Sync your data on every app start and update the device DB\r\n  private downloadDatabase(update = false) {\r\n    this.http.get('https://devdactic.fra1.digitaloceanspaces.com/tutorial/db.json')\r\n      .subscribe(async (jsonExport: JsonSQLite) => {\r\n        const jsonstring = JSON.stringify(jsonExport);\r\n        const isValid = await CapacitorSQLite.isJsonValid({ jsonstring });\r\n        console.log('import: ', jsonstring);\r\n        \r\n        if (isValid.result) {\r\n          this.dbName = jsonExport.database;\r\n          await Storage.set({ key: DB_NAME_KEY, value: this.dbName });\r\n          await CapacitorSQLite.importFromJson({ jsonstring });\r\n          await Storage.set({ key: DB_SETUP_KEY, value: '1' });\r\n\r\n          // Your potential logic to detect offline changes later\r\n          if (!update) {\r\n            await CapacitorSQLite.createSyncTable();\r\n          } else {\r\n            await CapacitorSQLite.setSyncDate({ syncdate: '' + new Date().getTime() })\r\n          }\r\n\r\n          this.dbReady.next(true);\r\n        }\r\n      });\r\n  }\r\n\r\n  getProductList() {\r\n    return this.dbReady.pipe(\r\n      switchMap(isReady => {\r\n        if (!isReady) {\r\n          return of({ values: [] });\r\n        } else {\r\n          const statement = 'SELECT * FROM products;';\r\n          return from(CapacitorSQLite.query({ statement, values: [] }));\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  async getProductById(id) {\r\n    const statement = `SELECT * FROM products LEFT JOIN vendors ON vendors.id=products.vendorid WHERE products.id=${id};`;\r\n    return (await CapacitorSQLite.query({ statement, values: [] })).values[0];\r\n  }\r\n\r\n  getDatabaseExport(mode) {\r\n    console.log('mode: ', mode);\r\n    return CapacitorSQLite.exportToJson({ jsonexportmode: mode });\r\n  }\r\n\r\n  addDummyProduct(name) {\r\n    const randomValue = Math.floor(Math.random() * 100) + 1;\r\n    const randomVendor = Math.floor(Math.random() * 3) + 1\r\n    const statement = `INSERT INTO products (name, currency, value, vendorid) VALUES ('${name}','EUR', ${randomValue}, ${randomVendor}), 'adquiriste este producto';`;\r\n    return CapacitorSQLite.execute({ statements: statement });\r\n  }\r\n\r\n  deleteProduct(productId) {\r\n    const statement = `DELETE FROM products WHERE id = ${productId};`;\r\n    return CapacitorSQLite.execute({ statements: statement });\r\n  }\r\n\r\n  // For testing only..\r\n  async deleteDatabase() {\r\n    const dbName = await Storage.get({ key: DB_NAME_KEY });\r\n    await Storage.set({ key: DB_SETUP_KEY, value: null });\r\n    return CapacitorSQLite.deleteDatabase({ database: dbName.value });\r\n  }\r\n\r\n\r\n}\r\n"]}