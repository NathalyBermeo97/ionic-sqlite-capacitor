import { JsonSQLite, capSQLiteVersionUpgrade } from '../definitions';
export declare class DatabaseSQLiteHelper {
    isOpen: boolean;
    NodeFs: any;
    private _databaseName;
    private _databaseVersion;
    private _upgradeStatements;
    private _alterTables;
    private _commonColumns;
    private _utils;
    constructor(dbName: string, dbVersion: number, upgradeStatements: Record<string, Record<number, capSQLiteVersionUpgrade>>);
    setup(): Promise<any>;
    private _openDB;
    createSyncTable(): Promise<any>;
    setSyncDate(syncDate: string): Promise<any>;
    close(databaseName: string): Promise<boolean>;
    exec(statements: string): Promise<any>;
    private execute;
    execSet(set: Array<any>): Promise<any>;
    private executeSet;
    run(statement: string, values: Array<any>): Promise<any>;
    private prepare;
    query(statement: string, values: Array<any>): Promise<Array<any>>;
    private select;
    deleteDB(dbName: string): Promise<boolean>;
    importJson(jsonData: JsonSQLite): Promise<any>;
    exportJson(mode: string): Promise<any>;
    private createDatabaseSchema;
    private createTableData;
    private isTableExists;
    private getTableColumnNamesTypes;
    private createQuestionMarkString;
    private setNameForUpdate;
    private checkColumnTypes;
    private isType;
    private isIdExists;
    private dbChanges;
    private getLastId;
    private beginTransaction;
    private endTransaction;
    private createJsonTables;
    private getTableModified;
    private getSyncDate;
    private getDBVersion;
    private updateDatabaseVersion;
    private onUpgrade;
    private dropTempTables;
    private backupTables;
    private backupTable;
    private dropAll;
    private dropTables;
    private dropIndexes;
    private dropTriggers;
    private findCommonColumns;
    private getTablesNames;
    private updateNewTablesData;
    private arraysIntersection;
    private backupDB;
    private restoreDB;
    private isDB;
}
